---
description: Python development rules with modern tooling
globs: ["*.py", "*.pyi"]
alwaysApply: true
---

# Python Development Guidelines

## Core Requirements

Use Python 3.11+ with modern syntax and features. Always import `from __future__ import annotations` at the top of every Python file. Use Ruff exclusively for linting and formatting - never use Black, isort, Flake8, or other legacy tools.

## Code Style

- Use double quotes for strings consistently
- Use 4-space indentation (no tabs)
- Use f-strings for string formatting, never % formatting or .format()
- Use descriptive variable names, avoid abbreviations
- Use type hints for all function parameters and return values
- Use modern collection types: dict, list, set (not Dict, List, Set from typing)

## Project Structure

Follow src/ directory structure for source code. Use absolute imports from src module, not relative imports. Place tests in tests/ directory with test_ prefix. Use pyproject.toml for all configuration.

## Essential Libraries

- **Pydantic Settings**: For configuration management with type-safe validation
- **pathlib**: For file operations instead of os.path
- **pytest**: For testing with fixtures and parametrized tests
- **mypy**: For static type checking with strict configuration
- **logging**: For logging instead of print statements
- **enum.Enum**: For constants and enumerated values

## Data Structures

Use dataclasses or Pydantic models for structured data, not plain dictionaries. Use list comprehensions and generator expressions for data processing. Use type-safe patterns and avoid `Any` type annotations.

## Error Handling

Use proper exception handling with specific exception types. Use environment variables for configuration with pydantic-settings. Create custom exception classes for library code.

## Async Programming

Use async/await patterns for I/O operations with modern Python async syntax. Use asyncio for concurrent operations. Use proper async context managers for resources.

## Quality Assurance

Before committing code, always run:
1. `ruff format` - Format code
2. `ruff check --fix` - Fix linting issues
3. `mypy src/` - Type checking
4. `pytest` - Run tests

Maintain zero linting warnings and type errors. Write comprehensive docstrings for public functions and classes.

## Modern Python Features

Use match statements for pattern matching, walrus operator for assignment expressions, and positional-only parameters where appropriate. Use context managers (with statements) for resource management.

## Performance and Security

Use generators for large datasets. Use appropriate data structures for the use case. Validate all user inputs. Use secure random number generation. Follow secure coding practices for file operations.