[project]
name = "{{PROJECT_NAME}}"
description = "A modern deep learning project with PyTorch Lightning"
version = "0.1.0"
authors = [{ name = "{{AUTHOR_NAME}}", email = "{{AUTHOR_EMAIL}}" }]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "torch>=2.0.0",
    "lightning>=2.0.0",
    "numpy>=1.24.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "rich>=13.0.0",
    "tqdm>=4.65.0",
    "scikit-learn>=1.3.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.6.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
vision = ["torchvision>=0.15.0", "Pillow>=10.0.0"]
nlp = ["transformers>=4.30.0", "tokenizers>=0.13.0"]
data = [
    "polars>=0.20.0",
    "pandas>=2.0.0",
    "seaborn>=0.12.0",
    "matplotlib>=3.7.0",
]
notebook = ["jupyter>=1.0.0", "ipywidgets>=8.0.0"]

[project.urls]
Homepage = "https://github.com/{{GITHUB_NAME}}/{{PROJECT_NAME}}"
Repository = "https://github.com/{{GITHUB_NAME}}/{{PROJECT_NAME}}"
Issues = "https://github.com/{{GITHUB_NAME}}/{{PROJECT_NAME}}/issues"

[project.scripts]
train = "src.train:main"
evaluate = "src.evaluate:main"

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
no_implicit_optional = true

# ML-specific ignores
[[tool.mypy.overrides]]
module = [
    "torch.*",
    "lightning.*",
    "sklearn.*",
    "matplotlib.*",
    "seaborn.*",
    "polars.*",
    "transformers.*",
    "tokenizers.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "tests/*",
    "src/config.py", # Config files often have many branches
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "\\.\\.\\.",                  # Ellipsis for type stubs
]
